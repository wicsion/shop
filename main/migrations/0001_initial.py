# Generated by Django 5.2.3 on 2025-07-03 14:35

import django.core.validators
import django.db.models.deletion
import mptt.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='URL-адрес')),
                ('logo', models.ImageField(blank=True, upload_to='brands/', verbose_name='Логотип')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('additional_info', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True, verbose_name='Активный')),
            ],
            options={
                'verbose_name': 'Бренд',
                'verbose_name_plural': 'Бренды',
            },
        ),
        migrations.CreateModel(
            name='Partner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('logo', models.ImageField(upload_to='partners/', verbose_name='Логотип')),
                ('link', models.URLField(blank=True, verbose_name='Ссылка')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активный')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок')),
            ],
            options={
                'verbose_name': 'Партнер',
                'verbose_name_plural': 'Партнеры',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ProductVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size', models.CharField(max_length=50, verbose_name='Размер')),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Цена')),
                ('old_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Старая цена')),
                ('barcode', models.CharField(blank=True, help_text='Штрих-код, общий для этого размера во всех товарах', max_length=50, verbose_name='Штрих-код размера')),
                ('quantity', models.PositiveIntegerField(default=0, verbose_name='Количество')),
                ('sku', models.CharField(blank=True, help_text="Автоматически генерируется как 'SIZE-{размер}'", max_length=100, verbose_name='Артикул размера')),
            ],
            options={
                'verbose_name': 'Вариант товара',
                'verbose_name_plural': 'Варианты товаров',
                'ordering': ['size'],
            },
        ),
        migrations.CreateModel(
            name='Slider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Заголовок')),
                ('subtitle', models.CharField(blank=True, max_length=255, verbose_name='Подзаголовок')),
                ('image', models.ImageField(upload_to='sliders/', verbose_name='Изображение')),
                ('link', models.CharField(blank=True, max_length=255, verbose_name='Ссылка')),
                ('button_text', models.CharField(blank=True, max_length=50, verbose_name='Текст кнопки')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активный')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок')),
            ],
            options={
                'verbose_name': 'Слайд',
                'verbose_name_plural': 'Слайдер',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(blank=True, max_length=40, null=True, verbose_name='Ключ сессии')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Корзина',
                'verbose_name_plural': 'Корзины',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='URL-адрес')),
                ('image', models.ImageField(blank=True, null=True, upload_to='categories/', verbose_name='Изображение')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Популярная категория')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок')),
                ('xml_id', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('icon', models.CharField(blank=True, choices=[('fas fa-tshirt', 'Одежда'), ('fas fa-mug-hot', 'Посуда'), ('fas fa-pen', 'Ручки'), ('fas fa-mobile-alt', 'Электроника'), ('fas fa-shopping-bag', 'Сумки'), ('fas fa-book', 'Книги/Блокноты'), ('fas fa-box-open', 'Упаковка'), ('fas fa-gift', 'Подарки'), ('fas fa-building', 'Корпоративные'), ('fas fa-umbrella', 'Зонты'), ('fas fa-running', 'Спорт'), ('fas fa-suitcase', 'Путешествия'), ('fas fa-utensils', 'Пикник'), ('fas fa-hiking', 'Походы'), ('fas fa-umbrella-beach', 'Пляж')], max_length=50, verbose_name='Иконка')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='main.category', verbose_name='Родительская категория')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(blank=True, max_length=40, null=True, verbose_name='Ключ сессии')),
                ('status', models.CharField(choices=[('new', 'Новый'), ('in_progress', 'В обработке'), ('completed', 'Завершен'), ('cancelled', 'Отменен')], default='new', max_length=20, verbose_name='Статус')),
                ('first_name', models.CharField(max_length=100, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=100, verbose_name='Фамилия')),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
                ('phone', models.CharField(max_length=20, verbose_name='Телефон')),
                ('address', models.TextField(verbose_name='Адрес')),
                ('comment', models.TextField(blank=True, verbose_name='Комментарий')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Заказ',
                'verbose_name_plural': 'Заказы',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='URL-адрес')),
                ('sku', models.CharField(max_length=50, unique=True, verbose_name='Артикул')),
                ('short_description', models.TextField(blank=True, verbose_name='Краткое описание')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Цена')),
                ('old_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Старая цена')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Рекомендуемый товар')),
                ('is_new', models.BooleanField(default=False, verbose_name='Новый товар')),
                ('is_bestseller', models.BooleanField(default=False, verbose_name='Хит продаж')),
                ('in_stock', models.BooleanField(default=True, verbose_name='В наличии')),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='Количество')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product_brands', to='main.brand', verbose_name='Бренд')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='products', to='main.category', verbose_name='Категория')),
            ],
            options={
                'verbose_name': 'Товар',
                'verbose_name_plural': 'Товары',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='Количество')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Цена')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='main.order', verbose_name='Заказ')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='main.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Элемент заказа',
                'verbose_name_plural': 'Элементы заказа',
            },
        ),
        migrations.CreateModel(
            name='ProductReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])),
                ('text', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_approved', models.BooleanField(default=False)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='main.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Отзыв о товаре',
                'verbose_name_plural': 'Отзывы о товарах',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductVariantThrough',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=0, verbose_name='Количество для товара')),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Цена для этого товара')),
                ('old_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Старая цена')),
                ('item_sku', models.CharField(blank=True, help_text='Артикул для конкретной связки товар-размер', max_length=100, verbose_name='Артикул позиции')),
                ('item_barcode', models.CharField(blank=True, help_text='Уникальный штрих-код для связки товар-размер', max_length=50, verbose_name='Штрих-код позиции')),
                ('variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.productvariant', verbose_name='Размер')),
            ],
            options={
                'verbose_name': 'Связь товара с размером',
                'verbose_name_plural': 'Связи товаров с размерами',
            },
        ),
        migrations.CreateModel(
            name='Wishlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('products', models.ManyToManyField(related_name='wishlists', to='main.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Список желаний',
                'verbose_name_plural': 'Списки желаний',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='XMLProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(blank=True, default=0, help_text='Автоматически рассчитывается из вариантов', null=True, verbose_name='Общее количество')),
                ('sizes_available', models.CharField(blank=True, max_length=255, null=True, verbose_name='Доступные размеры')),
                ('product_id', models.CharField(max_length=50, unique=True, verbose_name='ID товара')),
                ('code', models.CharField(max_length=100, verbose_name='Артикул')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Цена')),
                ('old_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Старая цена')),
                ('made_in_russia', models.BooleanField(default=False, verbose_name='Сделано в России')),
                ('is_eco', models.BooleanField(default=False, verbose_name='Эко-подарки')),
                ('for_kids', models.BooleanField(default=False, verbose_name='Для детей')),
                ('is_profitable', models.BooleanField(default=False, verbose_name='Выгодно')),
                ('application_type', models.CharField(blank=True, choices=[('uv_print', 'УФ-печать'), ('laser_engraving', 'Лазерная гравировка'), ('embroidery', 'Вышивка'), ('silk_print', 'Шелкография'), ('tampo_print', 'Тамопечать'), ('thermal_print', 'Термопечать')], max_length=100, verbose_name='Вид нанесения')),
                ('mechanism_type', models.CharField(blank=True, max_length=100, verbose_name='Механизм')),
                ('ball_diameter', models.CharField(blank=True, max_length=50, verbose_name='Диаметр шарика')),
                ('refill_type', models.CharField(blank=True, max_length=100, verbose_name='Тип стержня')),
                ('replaceable_refill', models.BooleanField(default=False, verbose_name='Сменный стержень')),
                ('format_size', models.CharField(blank=True, max_length=20, verbose_name='Формат')),
                ('cover_type', models.CharField(blank=True, max_length=100, verbose_name='Тип обложки')),
                ('block_color', models.CharField(blank=True, max_length=50, verbose_name='Цвет блока')),
                ('edge_type', models.CharField(blank=True, max_length=50, verbose_name='Обрез блока')),
                ('page_count', models.PositiveIntegerField(blank=True, null=True, verbose_name='Число страниц')),
                ('calendar_grid', models.CharField(blank=True, max_length=100, verbose_name='Календарная сетка')),
                ('ribbon_color', models.CharField(blank=True, max_length=50, verbose_name='Цвет ляссе')),
                ('box_size', models.CharField(blank=True, max_length=100, verbose_name='Размер коробки/полотна')),
                ('density', models.CharField(blank=True, max_length=50, verbose_name='Плотность (г/м²)')),
                ('expiration_date', models.CharField(blank=True, max_length=100, verbose_name='Срок годности')),
                ('special_filters', models.JSONField(blank=True, default=list)),
                ('size', models.CharField(blank=True, max_length=50, null=True)),
                ('dimensions', models.CharField(blank=True, max_length=50, null=True)),
                ('collection', models.CharField(blank=True, max_length=100, verbose_name='Коллекция')),
                ('fit', models.CharField(blank=True, max_length=50, null=True, verbose_name='Посадка')),
                ('cut', models.CharField(blank=True, max_length=50, null=True, verbose_name='Крой')),
                ('lining', models.CharField(blank=True, max_length=50, null=True, verbose_name='Изнанка')),
                ('has_lining', models.BooleanField(default=False, verbose_name='Есть подкладка')),
                ('video_link', models.URLField(blank=True, null=True)),
                ('stock_marking', models.CharField(blank=True, max_length=100, null=True)),
                ('umbrella_type', models.CharField(blank=True, max_length=100, null=True, verbose_name='Тип зонта')),
                ('marking_type', models.CharField(blank=True, choices=[('textile', 'Текстиль'), ('other', 'Другое')], max_length=20, verbose_name='Тип маркировки')),
                ('packaging_type', models.CharField(blank=True, choices=[('bag', 'Пакет'), ('gift_box', 'Подарочная коробка'), ('none', 'Без упаковки')], max_length=20, verbose_name='Тип упаковки')),
                ('pantone_color', models.CharField(blank=True, max_length=50, verbose_name='Пантон (цвет)')),
                ('gender', models.CharField(blank=True, choices=[('male', 'Мужские'), ('female', 'Женские'), ('unisex', 'Унисекс')], max_length=10, verbose_name='Пол')),
                ('requires_marking', models.BooleanField(default=False, verbose_name='Подлежит маркировке')),
                ('individual_packaging', models.BooleanField(default=False, verbose_name='Индивидуальная упаковка')),
                ('cover_material', models.CharField(blank=True, max_length=100, verbose_name='Материал обложки')),
                ('block_number', models.CharField(blank=True, max_length=50, verbose_name='Номер блока')),
                ('dating', models.CharField(blank=True, max_length=100, verbose_name='Датировка')),
                ('additional_image_urls', models.JSONField(blank=True, default=list, verbose_name='URL дополнительных изображений')),
                ('material', models.CharField(blank=True, max_length=255, verbose_name='Материал')),
                ('weight', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Вес')),
                ('volume', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Объем')),
                ('barcode', models.CharField(blank=True, max_length=50, verbose_name='Штрих-код')),
                ('status', models.CharField(choices=[('new', 'Новинка'), ('regular', 'Обычный'), ('limited', 'До исчерпания')], default='regular', max_length=20, verbose_name='Статус')),
                ('brand', models.CharField(blank=True, max_length=255, null=True, verbose_name='Бренд')),
                ('in_stock', models.BooleanField(default=True, verbose_name='В наличии')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Рекомендуемый')),
                ('is_bestseller', models.BooleanField(default=False, verbose_name='Хит продаж')),
                ('was_imported', models.BooleanField(default=True, verbose_name='Был импортирован')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('xml_data', models.JSONField(blank=True, null=True, verbose_name='Данные XML')),
                ('alt_ids', models.JSONField(blank=True, default=list, verbose_name='Альтернативные ID')),
                ('brand_link', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.brand', verbose_name='Связанный бренд')),
                ('categories', models.ManyToManyField(related_name='xml_products', to='main.category', verbose_name='Категории')),
                ('variants', models.ManyToManyField(related_name='product_variants', through='main.ProductVariantThrough', through_fields=('product', 'variant'), to='main.productvariant', verbose_name='Варианты размеров')),
            ],
            options={
                'verbose_name': 'XML Товар',
                'verbose_name_plural': 'XML Товары',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='productvariantthrough',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.xmlproduct', verbose_name='Товар'),
        ),
        migrations.AddField(
            model_name='productvariant',
            name='product',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='product_variants', to='main.xmlproduct', verbose_name='Товар'),
        ),
        migrations.CreateModel(
            name='ProductFilter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filter_type', models.CharField(max_length=50)),
                ('filter_id', models.CharField(max_length=50)),
                ('name', models.CharField(blank=True, max_length=100)),
                ('products', models.ManyToManyField(related_name='product_filters', to='main.xmlproduct')),
            ],
            options={
                'verbose_name': 'Фильтр товара',
                'verbose_name_plural': 'Фильтры товаров',
            },
        ),
        migrations.CreateModel(
            name='ProductAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(max_length=255, upload_to='attachments/', verbose_name='Файл')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='Название')),
                ('attachment_type', models.CharField(choices=[('image', 'Изображение'), ('document', 'Документ'), ('video', 'Видео'), ('other', 'Другое')], default='image', max_length=20, verbose_name='Тип вложения')),
                ('sort_order', models.PositiveIntegerField(default=0, verbose_name='Порядок сортировки')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='main.xmlproduct', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Вложение товара',
                'verbose_name_plural': 'Вложения товаров',
                'ordering': ['sort_order', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Количество')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('size', models.CharField(blank=True, max_length=50, null=True)),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='main.cart', verbose_name='Корзина')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.product', verbose_name='Товар')),
                ('xml_product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.xmlproduct', verbose_name='XML Товар')),
            ],
            options={
                'verbose_name': 'Элемент корзины',
                'verbose_name_plural': 'Элементы корзины',
            },
        ),
        migrations.CreateModel(
            name='ApplicationType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('products', models.ManyToManyField(related_name='application_types', to='main.xmlproduct')),
            ],
            options={
                'verbose_name': 'Тип нанесения',
                'verbose_name_plural': 'Типы нанесения',
            },
        ),
        migrations.AddIndex(
            model_name='xmlproduct',
            index=models.Index(fields=['product_id'], name='main_xmlpro_product_abedca_idx'),
        ),
        migrations.AddIndex(
            model_name='xmlproduct',
            index=models.Index(fields=['code'], name='main_xmlpro_code_b8d7a4_idx'),
        ),
        migrations.AddIndex(
            model_name='xmlproduct',
            index=models.Index(fields=['name'], name='main_xmlpro_name_acd157_idx'),
        ),
        migrations.AddIndex(
            model_name='xmlproduct',
            index=models.Index(fields=['price'], name='main_xmlpro_price_532b15_idx'),
        ),
        migrations.AddIndex(
            model_name='xmlproduct',
            index=models.Index(fields=['in_stock'], name='main_xmlpro_in_stoc_b0b84a_idx'),
        ),
        migrations.AddIndex(
            model_name='xmlproduct',
            index=models.Index(fields=['status'], name='main_xmlpro_status_190aa6_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='productvariantthrough',
            unique_together={('product', 'variant')},
        ),
        migrations.AlterUniqueTogether(
            name='productvariant',
            unique_together={('product', 'size')},
        ),
        migrations.AlterUniqueTogether(
            name='productfilter',
            unique_together={('filter_type', 'filter_id')},
        ),
        migrations.AlterUniqueTogether(
            name='cartitem',
            unique_together={('cart', 'product', 'xml_product')},
        ),
    ]
