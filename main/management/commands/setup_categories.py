from django.core.management.base import BaseCommand
from main.models import Category
from django.utils.text import slugify


class Command(BaseCommand):
    help = 'Создает основную структуру категорий и связывает подкатегории'

    def handle(self, *args, **options):
        # Основные родительские категории
        MAIN_CATEGORIES = [
            {'name': 'Одежда', 'icon': 'fas fa-tshirt'},
            {'name': 'Посуда', 'icon': 'fas fa-mug-hot'},
            {'name': 'Ручки', 'icon': 'fas fa-pen'},
            {'name': 'Электроника', 'icon': 'fas fa-mobile-alt'},
            {'name': 'Сумки', 'icon': 'fas fa-shopping-bag'},
            {'name': 'Ежедневники и блокноты', 'icon': 'fas fa-book'},
            {'name': 'Упаковка', 'icon': 'fas fa-box-open'},
            {'name': 'Подарочные наборы', 'icon': 'fas fa-gift'},
            {'name': 'Корпоративные подарки', 'icon': 'fas fa-building'},
            {'name': 'Зонты', 'icon': 'fas fa-umbrella'},
            {'name': 'Спортивная одежда', 'icon': 'fas fa-running'},
            {'name': 'Готовые решения', 'icon': 'fas fa-hands-helping'},
            {'name': 'Товары для путешествий', 'icon': 'fas fa-suitcase'},
            {'name': 'Наборы для пикника', 'icon': 'fas fa-utensils'},
            {'name': 'Вещи для похода', 'icon': 'fas fa-hiking'},
            {'name': 'Пляжный отдых', 'icon': 'fas fa-umbrella-beach'},
            {'name': 'Вкусные подарки', 'icon': 'fas fa-gift'},
            {'name': 'Дом', 'icon': 'fas fa-home'},
            {'name': 'Отдых', 'icon': 'fas fa-umbrella-beach'},
        ]

        # Создаем или обновляем основные категории
        parent_categories = {}
        for cat_data in MAIN_CATEGORIES:
            slug = slugify(cat_data['name'])
            category, created = Category.objects.update_or_create(
                slug=slug,
                defaults={
                    'name': cat_data['name'],
                    'icon': cat_data.get('icon', ''),
                    'is_featured': True,
                    'order': 0,
                    'parent': None
                }
            )
            parent_categories[cat_data['name']] = category

        # Подкатегории для всех категорий
        SUBCATEGORIES_MAPPING = {
            'Одежда': [
                'Футболки', 'Кепки и бейсболки', 'Панамы', 'Рубашки поло', 'Лонгсливы',
                'Футболки для промо', 'Ветровки', 'Толстовки', 'Свитшоты', 'Худи',
                'Куртки', 'Кофты из флиса', 'Шарфы', 'Шапки', 'Перчатки и варежки',
                'Вязаные комплекты', 'Джемперы', 'Жилеты', 'Офисные рубашки', 'Фартуки',
                'Спортивная одежда', 'Брюки и шорты', 'Детская одежда', 'Аксессуары',
                'Вязальное производство'
            ],
            'Посуда': [
                'Кружки', 'Термокружки', 'Бутылки для воды', 'Чайные наборы', 'Кофейные наборы',
                'Бокалы', 'Стаканы', 'Пивные бокалы', 'Термосы', 'Термосы для еды',
                'Стаканы с крышкой', 'Ланчбоксы', 'Кухонные аксессуары', 'Мельницы для специй',
                'Разделочные доски', 'Барные аксессуары', 'Фляжки', 'Предметы сервировки',
                'Костеры', 'Заварочные чайники'
            ],
            'Ручки': [
                'Карандаши', 'Эко ручки', 'Металлические ручки', 'Пластиковые ручки',
                'Футляры для ручек'
            ],
            'Электроника': [
                'Аккумуляторы', 'Зарядные устройства', 'Мобильные аксессуары',
                'Колонки и наушники', 'Флешки', 'Увлажнители', 'Лампы и светильники',
                'Бытовая техника', 'Умный дом'
            ],
            'Сумки': [
                'Поясные сумки', 'Рюкзаки', 'Сумки для покупок', 'Сумки для ноутбука',
                'Сумки для документов'
            ],
            'Ежедневники и блокноты': [
                'Ежедневники', 'Блокноты', 'Калькулятор ежедневника', 'Наборы с ежедневниками',
                'Упаковка для ежедневников', 'Ежедневники на заказ'
            ],
            'Упаковка': [
                'Коробки', 'Пакеты', 'Подарочная упаковка', 'Упаковка на заказ',
                'Новогодняя упаковка'
            ],
            'Подарочные наборы': [
                'Бизнес наборы', 'Наборы из кожи', 'Наборы велком-пак', 'Дорожные наборы',
                'Наборы с термокружками', 'Наборы с кружками', 'Наборы с бутылками для воды',
                'Наборы с аккумуляторами', 'Наборы с флешками', 'Наборы с пледами',
                'Наборы с мультитулами', 'Винные наборы', 'Наборы для сыра', 'Наборы для виски',
                'Кухонные наборы', 'Спортивные наборы', 'Наборы для выращивания',
                'Наборы для мужчин', 'Наборы для женщин', 'Наборы для детей',
                'Новогодние наборы', 'Наборы с ежедневниками', 'Наборы ручек',
                'Продуктовые наборы', 'Чайные наборы', 'Кофейные наборы',
                'Наборы для пикника', 'Банные наборы'
            ],
            'Корпоративные подарки': [
                'Настольные аксессуары', 'Кошельки', 'Визитницы', 'Чехлы для карт',
                'Чехлы для пропуска', 'Бейджи и ленты', 'Дорожные органайзеры',
                'Обложки для документов', 'Папки, портфели', 'Награды', 'Книги',
                'Фликеры', 'Антистрессы', 'Брелки', 'Канцтовары', 'Зажигалки'
            ],
            'Зонты': [
                'Зонты-трости', 'Складные зонты', 'Малые зонты', 'Детские зонты'
            ],
            'Спортивная одежда': [
                'Спортивные костюмы', 'Спортивные футболки', 'Шорты для тренировок',
                'Леггинсы', 'Ветровки спортивные', 'Термобелье', 'Компрессионная одежда'
            ],
            'Готовые решения': [
                'Стартовый набор', 'Улучшенный набор', 'Премиум для компаний'
            ],
            'Товары для путешествий': [
                'Дорожные подушки', 'Дорожные наборы', 'Органайзеры',
                'Чехлы для документов', 'Дорожные фляги', 'Сумки-косметички',
                'Дорожные адаптеры'
            ],
            'Наборы для пикника': [
                'Базовые наборы', 'Премиум наборы', 'Корпоративные',
                'Наборы с посудой', 'Наборы с пледом', 'Наборы для кемпинга',
                'Наборы для барбекю'
            ],
            'Вещи для похода': [
                'Мультитулы', 'Фонарики', 'Термосы', 'Походные ножи',
                'Компасы', 'Походные горелки', 'Спальные мешки'
            ],
            'Пляжный отдых': [
                'Пляжные полотенца', 'Сумки-холодильники', 'Наборы для отдыха',
                'Пляжные зонты', 'Коврики для пляжа', 'Чехлы для очков'
            ],
            'Вкусные подарки': [
                'Продуктовые наборы', 'Мед', 'Варенье', 'Чай', 'Кофе',
                'Шоколад', 'Конфеты и сладости', 'Снеки', 'Специи'
            ],
            'Дом': [
                'Домашний текстиль', 'Кухонные принадлежности', 'Предметы интерьера',
                'Освещение', 'Хранение'
            ],
            'Отдых': [
                'Игры и развлечения', 'Книги', 'Музыкальные инструменты',
                'Творческие наборы', 'Спортивные игры'
            ]
        }

        # Создаем подкатегории для всех категорий
        for parent_name, subcats in SUBCATEGORIES_MAPPING.items():
            if parent_name in parent_categories:
                parent = parent_categories[parent_name]
                for subcat_name in subcats:
                    # Пропускаем, если подкатегория уже является родительской категорией
                    if subcat_name in parent_categories:
                        print(f"Пропуск: {subcat_name} (уже является родительской категорией)")
                        continue

                    # Делаем slug уникальным, добавляя родительский slug
                    slug = f"{slugify(parent_name)}-{slugify(subcat_name)}"

                    try:
                        Category.objects.update_or_create(
                            slug=slug,
                            defaults={
                                'name': subcat_name,
                                'parent': parent,
                                'order': 0
                            }
                        )
                        print(f"Создана подкатегория: {subcat_name} (родитель: {parent_name})")
                    except Exception as e:
                        print(f"Ошибка при создании {subcat_name}: {e}")

        self.stdout.write(self.style.SUCCESS('Структура категорий успешно создана!'))
